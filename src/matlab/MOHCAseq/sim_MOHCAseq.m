function [ D_sim, pdbstruct, D_combine ] = sim_MOHCAseq( pdbfile, pdbname, offset, tail_length, fignum_start, plot_heads, D, printfig )
%%% [ D_sim, pdbstruct, D_combine ] = sim_MOHCAseq( pdb, pdbname, offset, tail_length, fignum_start, plot_heads, D, printfig )
%%%
%%%  INPUTS
%%%     pdbfile:       Either a string name of a .pdb file or a structure array produced by the pdbread function 
%%%     pdbname:       Either the string name of the input .pdb file or the string name of the input structure array 
%%%     offset:        Number of nucleotides before the 5' end of the RNA sequence of interest (e.g. length of 5'-buffer region and reference hairpin) 
%%%     tail_length:   Number of nucleotides after the 3' end of the RNA sequence of interest (e.g. length of 3'-buffer region, reference hairpin, and Tail2) 
%%%     fignum_start:  Starting number for figures generated by this script 
%%%     plot_heads:    Headers for plots formatted as cell array of strings (e.g. {'MOHCA-Seq, P4P6modA, +ascorbate','MOHCA-Seq, P4P6modA, -ascorbate', ...}) 
%%%   (OPTIONAL)
%%%     D:             Experimental data array; if provided, the script will produce a dataset and figures overlaying the simulated and experimental data 
%%%     printfig:      Determines whether figures will be saved to a folder called "Figures_Sim" (0 for no, 1 for yes, default 1) 
%%%
%%%  OUTPUTS
%%%     D_sim:         Data of simulated Z-scores of reactivities from input D
%%%     pdbstruct:     Either structure array from pdbread(pdb) or simply the input pdb 
%%%     D_combine:     Overlaid data of Zscores_mask and D_sim 
%%%
%%%
%%% 1. Read in PDB file (or copy to variable)
%%% 2. Calculate pairwise distances between 2'-OH of 'source position' and C4' of 'hit position' 
%%% 3. Pad simulated data with zeros to match dimensions of experimental data 
%%% 4. If input includes experimental data, plot simulated and experimental data together 
%%% 5. If printfig specified, save figures
%%%
%%%
%%% (C) Clarence Cheng, 2013

[D_sim_a,pdbstruct] = get_simulated_data( pdb );

for i = 1:length(pdbstruct.Model.Atom)
    resSeqs(i) = pdbstruct.Model.Atom(1,i).resSeq;
end

struct_length = max(resSeqs) - pdbstruct.Model.Atom(1,1).resSeq;
fprintf('Total length of PDB sequence: %s\n\n', num2str(struct_length));

struct_length = max(resSeqs) - pdbstruct.Model.Atom(1,1).resSeq;
tot_length = offset+1 + struct_length+1 + tail_length;
fprintf('Total length of PDB sequence with offset and tail: %s\n\n', num2str(tot_length));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% 3. Pad simulated data with zeros to match dimensions of experimental data 

fprintf('Dimensions of simulated dataset: %s\n\n', num2str(size(D_sim_a)));

D_sim = D_sim_a;

% for n = 1:length(D_sim_a)
    [x, y] = size(D_sim_a);
    D_sim = [zeros(x, offset+1) D_sim zeros(x, tail_length)];
    D_sim = [zeros(offset, tot_length); D_sim; zeros(tail_length+1, tot_length)];   %shifts padded D_sim map 'up' by one nt relative to experimental data, b/c axes adjusted to denote true hit positions for experimental data
% end

fprintf('Dimensions of simulated dataset expanded to size of experimental data: %s\n\n', num2str(size(D_sim)));

if ~PLOT_STUFF; return; end;

% for n = 1:length(D_sim)
figure(fignum_start); clf reset; fig_MOHCAseq( D_sim, 0, 1000, 1-gray(100), pdbname, 'Simulated data', offset, tail_length, seqstart, 1, 1, 1);
% end
fignum_start = fignum_start + 1;



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% 4. If input includes experimental data, plot simulated and experimental data together 

if exist('D');
    fprintf('Input includes experimental data... Plotting comparisons between simulated and experimental data...\n\n');
        
    D_combine = {};
    
    for n = 1:length(D)
        D_combine{1,n} = transpose(D{1,n})*50;

        for i = 1:length(D_sim)
            for j = 1:length(D_sim)
                if i <= j
                    D_combine{1,n}(i,j) = D_sim(i,j)*500;
                else
                end
            end
        end
        
        fignum(n)  = fignum_start + 2*(n-1);
        figure(fignum(n)); clf reset;
        fig_MOHCAseq( D_sim,          1, 1000, 1-gray(100), pdbname,       'Simulated data',                          offset, tail_length, seqstart, 1, 3, 1);
        fig_MOHCAseq( D{1,n},         1, 50,   1-gray(100), plot_heads{n}, 'Experimental data',                       offset, tail_length, seqstart, 1, 3, 2);
        fig_MOHCAseq( D_combine{1,n}, 0, 1,     1-gray(100), plot_heads{n}, 'Overlay simulated and experimental data', offset, tail_length, seqstart, 1, 3, 3);
        figure(fignum(n)); subplot(1,3,3); hold on;
            xn = 1:length(D_combine{1,n});
            for i = 0:1:20
                y = i*25 - xn;
                plot(y,'Color',[0.5 0.5 0.5]);
            end
            z = xn;
            plot(z,'Color','m');
            
        figcomb(n) = fignum_start + 2*(n-1) + 1;
        figure(figcomb(n)); clf reset;
        fig_MOHCAseq( D_combine{1,n}, 0, 1,     1-gray(100), plot_heads{n}, 'Overlay simulated and experimental data', offset, tail_length, seqstart, 1, 1, 1);
        figure(figcomb(n)); hold on;
            xn = 1:length(D_combine{1,n});
            for i = 0:1:20
                y = i*25 - xn;
                plot(y,'Color',[0.5 0.5 0.5]);
            end
            z = xn;
            plot(z,'Color','k');
    end
    set(gcf, 'PaperPositionMode','auto','color','white');
    
else
    fprintf('No experimental data input... No comparison plot will be generated...\n\n');

    D_combine = [];
end


    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% 5. If printfig specified, save figures

if ~exist( 'printfig' ); printfig = 0; end
if printfig == 1
    tag = pwd;
    if tag(end) == '/'; tag = tag(1:end-1); end; % get rid of final slash
    %  just get the last directory name.
    tags = split_string( tag, '/' );
    tag = tags{ end };
    
    print_save_figure(figure(fignum_start-1), [tag,'_SimulatedMap'], 'Figures_Sim', 1);
    for n = 1:length(fignum)
        print_save_figure(figure(fignum(n)), [tag,'_',num2str(n),'_AllMaps'], 'Figures_Sim', 1);
        print_save_figure(figure(figcomb(n)), [tag,'_',num2str(n),'_OverlayMap'], 'Figures_Sim', 1);
    end
else
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% fig_MOHCAseq: helper function to make figures

function fig_MOHCAseq( D, trnspose, scale, colmap, head, head2, offset, tail_length, seqstart, plotsubx, plotsuby, plotsubn )     %plotsubs are the x, y, and n values that determine which subplot the image is plotted in

subplot(plotsubx, plotsuby, plotsubn);

if trnspose == 1
    image(transpose(D)*scale);
elseif trnspose == 0
    image(D*scale);
end

axis image; colormap(colmap);
title({head; head2});

set(gca,'Xtick',0:10:length(D));
set(gca,'Ytick',0:10:length(D));
set(gca,'Xticklabel',{seqstart - (offset+2) : 10 : seqstart + length(D) - (offset+2)});
set(gca,'Yticklabel',{seqstart - (offset+2) + 1 : 10 : seqstart + length(D) - (offset+2) + 1});     % Add 1 to y-axis (hit position) tick labels b/c hit position detected is 1 nt 5' of actual hit position (hit causes loss of the nt at the true hit position)
xlabel('Radical source position');
ylabel('Pairwise hit position');

make_lines(offset + 1,'m',0.5);                                   % Offset is the number of nucleotides in the probed sequence before the first nucleotide in the xtal structure
make_lines_horizontal(offset,'m',0.5);                            % Don't add 1 to offset because detected hit position is 1 nt 5' of true hit position
make_lines(length(D) - tail_length,'g',0.5);
make_lines_horizontal(length(D) - (tail_length + 1),'g',0.5);       % Add an extra 1 to tail_length because detected hit position is 1 nt 5' of true hit position

xticklabel_rotate; freezeColors;

% set(get(gca,'Xlabel'),'Position',get(get(gca,'Xlabel'),'Position'));
set(get(gca,'Xlabel'),'Position',get(get(gca,'Xlabel'),'Position')+[0 0.02 0]);

% xlab = get(gca,'Xlabel');




